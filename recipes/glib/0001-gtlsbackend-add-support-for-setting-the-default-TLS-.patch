From 660b999d516caadd605ed09114b5caa4b393d559 Mon Sep 17 00:00:00 2001
From: Matthew Waters <matthew@centricular.com>
Date: Thu, 16 Aug 2018 23:25:29 +1000
Subject: [PATCH] gtlsbackend: add support for setting the default TLS database

There are many cases where a default TLS database is not able to be
defined within the constraints of a system.  For example glib-networking
(or glib-openssl) cannot retrieve the default certificate store on iOS
or Android and need to be initialized from a cert file of certificates
bundled with the application.

Previously GStreamer was relying on a custom patch to glib-networking to
populate the default database from the file pointed to by the
CA_CERTIFICATES environment variable however the mechanism that enabled
this was recently remove from glib-networking.

Adding a more generic g_tls_backend_set_default_database() API allows
application developers to override the default database using their own
certificates as well as allowing equivalent functionality on Android/iOS
(or others) as on the default database handling Linux.

Fixes https://gitlab.gnome.org/GNOME/glib-networking/issues/35
---
 docs/reference/gio/gio-sections.txt |   1 +
 gio/gtlsbackend.c                   |  43 ++++++++-
 gio/gtlsbackend.h                   |   3 +
 gio/tests/Makefile.am               |   1 +
 gio/tests/gtesttlsbackend.c         | 140 ++++++++++++++++++++++++++++
 5 files changed, 187 insertions(+), 1 deletion(-)

diff --git a/docs/reference/gio/gio-sections.txt b/docs/reference/gio/gio-sections.txt
index 2eb7efc..2d73550 100644
--- a/docs/reference/gio/gio-sections.txt
+++ b/docs/reference/gio/gio-sections.txt
@@ -3624,6 +3624,7 @@ g_tls_backend_get_default
 g_tls_backend_supports_tls
 g_tls_backend_supports_dtls
 g_tls_backend_get_default_database
+g_tls_backend_set_default_database
 g_tls_backend_get_certificate_type
 g_tls_backend_get_client_connection_type
 g_tls_backend_get_server_connection_type
diff --git a/gio/gtlsbackend.c b/gio/gtlsbackend.c
index 80af6ad..d67e490 100644
--- a/gio/gtlsbackend.c
+++ b/gio/gtlsbackend.c
@@ -21,6 +21,7 @@
 #include "glib.h"
 
 #include "gtlsbackend.h"
+#include "gtlsdatabase.h"
 #include "gdummytlsbackend.h"
 #include "gioenumtypes.h"
 #include "giomodule-priv.h"
@@ -84,6 +85,9 @@
 
 G_DEFINE_INTERFACE (GTlsBackend, g_tls_backend, G_TYPE_OBJECT)
 
+static GTlsDatabase *default_database;
+G_LOCK_DEFINE_STATIC (default_database_lock);
+
 static void
 g_tls_backend_default_init (GTlsBackendInterface *iface)
 {
@@ -161,13 +165,50 @@ g_tls_backend_supports_dtls (GTlsBackend *backend)
 GTlsDatabase *
 g_tls_backend_get_default_database (GTlsBackend *backend)
 {
+  GTlsDatabase *db;
+
   g_return_val_if_fail (G_IS_TLS_BACKEND (backend), NULL);
 
   /* This method was added later, so accept the (remote) possibility it can be NULL */
   if (!G_TLS_BACKEND_GET_INTERFACE (backend)->get_default_database)
     return NULL;
 
-  return G_TLS_BACKEND_GET_INTERFACE (backend)->get_default_database (backend);
+  G_LOCK (default_database_lock);
+
+  if (!default_database)
+    default_database = G_TLS_BACKEND_GET_INTERFACE (backend)->get_default_database (backend);
+  db = default_database ? g_object_ref (default_database) : NULL;
+  G_UNLOCK (default_database_lock);
+
+  return db;
+}
+
+/**
+ * g_tls_backend_set_default_database:
+ * @backend: the #GTlsBackend
+ * @database: (nullable): the #GTlsDatabase
+ *
+ * Set the default #GTlsDatabase used to verify TLS connections
+ *
+ * Any subsequent call to g_tls_backend_get_default_database() will return
+ * the database set in this call.  Existing databases and connections are not
+ * modified.
+ *
+ * Setting a %NULL default database will reset to using the system default
+ * database as if g_tls_backend_set_default_database() had never been called.
+ *
+ * Since: 2.60
+ */
+void
+g_tls_backend_set_default_database (GTlsBackend  *backend,
+                                    GTlsDatabase *database)
+{
+  g_return_if_fail (G_IS_TLS_BACKEND (backend));
+  g_return_if_fail (database == NULL || G_IS_TLS_DATABASE (database));
+
+  G_LOCK (default_database_lock);
+  g_set_object (&default_database, database);
+  G_UNLOCK (default_database_lock);
 }
 
 /**
diff --git a/gio/gtlsbackend.h b/gio/gtlsbackend.h
index a75036f..54ed17f 100644
--- a/gio/gtlsbackend.h
+++ b/gio/gtlsbackend.h
@@ -85,6 +85,9 @@ GTlsBackend *  g_tls_backend_get_default                (void);
 
 GLIB_AVAILABLE_IN_ALL
 GTlsDatabase * g_tls_backend_get_default_database       (GTlsBackend *backend);
+GLIB_AVAILABLE_IN_ALL
+void           g_tls_backend_set_default_database       (GTlsBackend  *backend,
+                                                         GTlsDatabase *database);
 
 GLIB_AVAILABLE_IN_ALL
 gboolean       g_tls_backend_supports_tls               (GTlsBackend *backend);
diff --git a/gio/tests/Makefile.am b/gio/tests/Makefile.am
index 14cd928..4c6bcc9 100644
--- a/gio/tests/Makefile.am
+++ b/gio/tests/Makefile.am
@@ -511,6 +511,7 @@ endif # OS_UNIX
 endif # HAVE_DBUS_DAEMON
 
 tls_interaction_SOURCES = tls-interaction.c gtesttlsbackend.c gtesttlsbackend.h
+tls_database_SOURCES = tls-database.c gtesttlsbackend.c gtesttlsbackend.h
 
 # -----------------------------------------------------------------------------
 
diff --git a/gio/tests/gtesttlsbackend.c b/gio/tests/gtesttlsbackend.c
index 83dad36..18381e8 100644
--- a/gio/tests/gtesttlsbackend.c
+++ b/gio/tests/gtesttlsbackend.c
@@ -22,6 +22,8 @@
 
 static GType _g_test_tls_certificate_get_type (void);
 static GType _g_test_tls_connection_get_type (void);
+static GTlsDatabase * _g_test_tls_backend_get_default_database (GTlsBackend * backend);
+static GType _g_test_tls_database_get_type (void);
 
 struct _GTestTlsBackend {
   GObject parent_instance;
@@ -57,6 +59,26 @@ g_test_tls_backend_iface_init (GTlsBackendInterface *iface)
   iface->get_certificate_type = _g_test_tls_certificate_get_type;
   iface->get_client_connection_type = _g_test_tls_connection_get_type;
   iface->get_server_connection_type = _g_test_tls_connection_get_type;
+  iface->get_default_database = _g_test_tls_backend_get_default_database;
+  iface->get_file_database_type = _g_test_tls_database_get_type;
+}
+
+static GTlsDatabase *
+_g_test_tls_backend_get_default_database (GTlsBackend * backend)
+{
+  static GTlsDatabase *default_db;
+  GError *error = NULL;
+
+  if (!default_db)
+    {
+      default_db = g_initable_new (_g_test_tls_database_get_type (),
+                                   NULL,
+                                   &error,
+                                   NULL);
+      g_assert_no_error (error);
+    }
+
+  return default_db;
 }
 
 /* Test certificate type */
@@ -164,6 +186,8 @@ g_test_tls_certificate_finalize (GObject *object)
   g_free (cert->cert_pem);
   g_free (cert->key_pem);
   g_clear_object (&cert->issuer);
+
+  G_OBJECT_CLASS (g_test_tls_certificate_parent_class)->finalize (object);
 }
 
 static void
@@ -327,3 +351,119 @@ g_test_tls_connection_get_private_key_pem (GTlsCertificate *cert)
 {
   return ((GTestTlsCertificate *)cert)->key_pem;
 }
+
+/* Test database type */
+
+typedef struct _GTestTlsDatabase      GTestTlsDatabase;
+typedef struct _GTestTlsDatabaseClass GTestTlsDatabaseClass;
+
+struct _GTestTlsDatabase {
+  GTlsDatabase parent_instance;
+  gchar *anchors;
+};
+
+struct _GTestTlsDatabaseClass {
+  GTlsDatabaseClass parent_class;
+};
+
+enum
+{
+  PROP_DATABASE_0,
+
+  PROP_DATABASE_ANCHORS,
+};
+
+static void g_test_tls_database_initable_iface_init (GInitableIface *iface);
+static void g_test_tls_file_database_file_database_interface_init (GInitableIface *iface);
+
+#define g_test_tls_database_get_type _g_test_tls_database_get_type
+G_DEFINE_TYPE_WITH_CODE (GTestTlsDatabase, g_test_tls_database, G_TYPE_TLS_DATABASE,
+			 G_IMPLEMENT_INTERFACE (G_TYPE_INITABLE,
+						g_test_tls_database_initable_iface_init);
+			 G_IMPLEMENT_INTERFACE (G_TYPE_TLS_FILE_DATABASE,
+						g_test_tls_file_database_file_database_interface_init))
+
+static void
+g_test_tls_database_get_property (GObject    *object,
+                                     guint       prop_id,
+                                     GValue     *value,
+                                     GParamSpec *pspec)
+{
+  GTestTlsDatabase *db = (GTestTlsDatabase *) object;
+
+  switch (prop_id)
+    {
+    case PROP_DATABASE_ANCHORS:
+      g_value_set_string (value, db->anchors);
+      break;
+    default:
+      g_assert_not_reached ();
+      break;
+    }
+}
+
+static void
+g_test_tls_database_set_property (GObject      *object,
+                                  guint         prop_id,
+                                  const GValue *value,
+                                  GParamSpec   *pspec)
+{
+  GTestTlsDatabase *db = (GTestTlsDatabase *) object;
+
+  switch (prop_id)
+    {
+    case PROP_DATABASE_ANCHORS:
+      g_free (db->anchors);
+      db->anchors = g_value_dup_string (value);
+      break;
+    default:
+      g_assert_not_reached ();
+      break;
+    }
+}
+
+static void
+g_test_tls_database_finalize (GObject *object)
+{
+  GTestTlsDatabase *db = (GTestTlsDatabase *) object;
+
+  g_free (db->anchors);
+
+  G_OBJECT_CLASS (g_test_tls_database_parent_class)->finalize (object);
+}
+
+static void
+g_test_tls_database_class_init (GTestTlsDatabaseClass *test_class)
+{
+  GObjectClass *gobject_class = G_OBJECT_CLASS (test_class);
+
+  gobject_class->get_property = g_test_tls_database_get_property;
+  gobject_class->set_property = g_test_tls_database_set_property;
+  gobject_class->finalize = g_test_tls_database_finalize;
+
+  g_object_class_override_property (gobject_class, PROP_DATABASE_ANCHORS, "anchors");
+}
+
+static void
+g_test_tls_database_init (GTestTlsDatabase *database)
+{
+}
+
+static gboolean
+g_test_tls_database_initable_init (GInitable       *initable,
+                                   GCancellable    *cancellable,
+                                   GError         **error)
+{
+  return TRUE;
+}
+
+static void
+g_test_tls_file_database_file_database_interface_init (GInitableIface *iface)
+{
+}
+
+static void
+g_test_tls_database_initable_iface_init (GInitableIface  *iface)
+{
+  iface->init = g_test_tls_database_initable_init;
+}
-- 
2.17.1

